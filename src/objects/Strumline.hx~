package objects;

import flixel.group.FlxSpriteGroup;

class Strumline extends FlxTypedSpriteGroup<StrumNote> {
	public static final keyCount:Int = 4;
	public static final size:Float = 0.7;

	public var player:Bool;
	public var notes:FlxTypedSpriteGroup<Note>;

	public function new(?x:Float, ?y:Float, ?player:Bool = false) {
		super(x, y);

		regenerate();

		this.player = player;
		notes = new FlxTypedSpriteGroup<Note>();
	}

	public function regenerate() {
		// just in case there's anything stored
		while (members.length != 0)
			members.pop().destroy();
		var strum:StrumNote = null;
		for (i in 0...keyCount) {
			add(strum = new StrumNote(this, i));
			strum.scale.set(size, size);
			strum.updateHitbox();
			strum.x += strum.width * i;
		}
		return this; // JUST in case.
	}

	// do i leave this here lol â†“
	// yes because it's funny
	// because haxe likes pissing itself when i add a sprite group to a class that only accepts another class
	// even though they extend the same class
	// due to the constraint of :FlxSprite, and FlxTypedSpriteGroup extends FlxSprite, when it wants FunkinSprite
	// in summary: TypedSpriteGroup is not a superclass of FunkinSprite therefore its a different type
	// because fuck you :3
	// :fire: en
	override function draw() {
		super.draw();
		if (notes != null)// && notes.exists && notes.visible) // temp forced
			notes.draw();
	}

	override function update(elapsed:Float) {
		super.update(elapsed);
		if (notes != null && notes.exists && notes.active)
			notes.update(elapsed);
	}

	public function addNote(note:Note) {
		var newNote:Note = note.spawn(this);
		notes.add(newNote);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StrumNote extends FunkinSprite {
	public var parent:Strumline;
	public var lane:Int;

	public function new(parent:Strumline, lane:Int) {
		super();

		this.parent = parent;
		this.lane = lane;

		// modding by length will cause different behaviour here
		// purple, blue, green, red, if it goes beyond that, it loops back, purple blue green red, and so on.
		final anim:String = Note.directions[lane % Note.directions.length];
		active = false;

		animation.finishCallback = _ -> {
			active = false;
			if ((!parent.player || (parent.player && Settings.getGameplaySetting('botplay'))) && animation.curAnim.name == 'notePressed') {
				playAnim('default');
			}
		}

		frames = Paths.sparrowAtlas(texture);
		animation.addByPrefix('default', 'arrow${anim.toUpperCase()}', 24);
		animation.addByPrefix('pressed', '$anim press', 24, false);
		animation.addByPrefix('notePressed', '$anim confirm', 24, false);

		playAnim('default');
	}

	override function playAnim(name:String, ?forced:Bool = true) {
		super.playAnim(name, forced);
		centerOffsets();
		centerOrigin();
	}
}